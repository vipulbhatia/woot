html
    head
        title Angular 2 App
        base(href="/")
        script(src="node_modules/angular2/bundles/angular2-polyfills.js")
        script(src="node_modules/systemjs/dist/system.src.js")
        script(src="node_modules/rxjs/bundles/Rx.js")
        script(src="node_modules/angular2/bundles/router.dev.js")
        script(src="node_modules/angular2/bundles/angular2.dev.js")
        script(src="node_modules/angular2/bundles/http.dev.js")
        script(src="https://code.jquery.com/jquery-2.2.0.min.js")
        script(src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js")
        link(href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet")
        link(href="css/main.css" rel="stylesheet")
        script.
            var ngVer = '@2.0.0-rc.4'; // lock in the angular package version; do not let it float to current!
            var routerVer = '@3.0.0-beta.2'; // lock router version
            var formsVer = '@0.2.0'; // lock forms version

            //map tells the System loader where to look for things
            var  map = {
             'app':                        'app',

             '@angular':                   'https://unpkg.com/@angular', // sufficient if we didn't pin the version
             '@angular/router':            'https://unpkg.com/@angular/router' + routerVer,
             '@angular/forms':             'https://unpkg.com/@angular/forms' + formsVer,
             'angular2-in-memory-web-api': 'https://unpkg.com/angular2-in-memory-web-api', // get latest
             'rxjs':                       'https://unpkg.com/rxjs@5.0.0-beta.6',
             'ts':                         'https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js',
             'typescript':                 'https://unpkg.com/typescript@1.9.0-dev.20160409/lib/typescript.js',
             'socket.io-client':           'node_modules/socket.io-client/socket.io.js'
            };

            //packages tells the System loader how to load when no filename and/or no extension
            var packages = {
             'app':                        { format: 'register',  defaultExtension: 'ts' },
             'rxjs':                       { defaultExtension: 'js' },
             'angular2-in-memory-web-api': { main: 'index.js', defaultExtension: 'js' },
             'socket.io-client':           { defaultExtension: 'js' }
            };

            var ngPackageNames = [
             'common',
             'compiler',
             'core',
             'http',
             'platform-browser',
             'platform-browser-dynamic',
             'router-deprecated',
             'upgrade',
            ];

            // Add map entries for each angular package
            // only because we're pinning the version with `ngVer`.
            ngPackageNames.forEach(function(pkgName) {
             map['@angular/'+pkgName] = 'https://unpkg.com/@angular/' + pkgName + ngVer;
            });

            // Add package entries for angular packages
            ngPackageNames.forEach(function(pkgName) {

             // Bundled (~40 requests):
             packages['@angular/'+pkgName] = { main: '/bundles/' + pkgName + '.umd.js', defaultExtension: 'js' };

             // Individual files (~300 requests):
             //packages['@angular/'+pkgName] = { main: 'index.js', defaultExtension: 'js' };
            });

            // No umd for router yet
            packages['@angular/router'] = { main: 'index.js', defaultExtension: 'js' };

            // Forms not on rc yet
            packages['@angular/forms'] = { main: 'index.js', defaultExtension: 'js' };

            var config = {
             // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER
             transpiler: 'ts',
             typescriptOptions: {
               tsconfig: true
             },
             meta: {
               'typescript': {
                 "exports": "ts"
               }
             },
             map: map,
             packages: packages
            };

            System.config(config);


            System.import('js/boot.js')
                .then(null, console.error.bind(console));
    body
        main
